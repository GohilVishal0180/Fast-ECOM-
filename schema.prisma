generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  seller        Seller?
  cart          Cart?
  orders        Order[]
  reviews       Review[]
  addresses     Address[]
  wishlist      Product[] @relation("UserWishlist")

  @@index([email])
}

model Seller {
  id              String    @id @default(cuid())
  userId          String    @unique
  businessName    String
  businessType    String
  gstNumber       String?
  panNumber       String?
  address         String
  city           String
  state          String
  pinCode        String
  accountHolder   String
  accountNumber   String
  ifscCode       String
  bankName       String
  bankBranch     String
  verified       Boolean   @default(false)
  status         SellerStatus @default(PENDING)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  products       Product[]
  orders         Order[]
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  images      String[]
  category    Category
  stock       Int
  sellerId    String
  status      ProductStatus @default(DRAFT)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  seller      Seller    @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  cartItems   CartItem[]
  orderItems  OrderItem[]
  reviews     Review[]
  wishedBy    User[]    @relation("UserWishlist")

  @@index([sellerId])
  @@index([category])
  @@index([status])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@index([cartId])
  @@index([productId])
}

model Order {
  id              String    @id @default(cuid())
  userId          String
  sellerId        String
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  shippingAddress String
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   PaymentMethod
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  seller          Seller    @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]

  @@index([userId])
  @@index([sellerId])
  @@index([status])
}

model OrderItem {
  id        String    @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Review {
  id        String    @id @default(cuid())
  rating    Int
  comment   String?
  userId    String
  productId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
}

model Address {
  id        String    @id @default(cuid())
  userId    String
  name      String
  phone     String
  address   String
  city      String
  state     String
  pinCode   String
  default   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Role {
  USER
  SELLER
  ADMIN
}

enum SellerStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  COD
  ONLINE
}

enum Category {
  ELECTRONICS
  FASHION
  HOME
  BEAUTY
  BOOKS
  SPORTS
  TOYS
}

